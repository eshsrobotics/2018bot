<!-- Every task can have an "if" or "unless" attribute as long as the right
     XML namespaces are imported in the document root, a useful trick gleaned
     from https://ant.Apache.org/manual/ifunless.html (which only works for
     Ant 1.9.1 and above.) -->
<project name="DriverStationClientCodeBuild"
         default="build"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">

    <property name="source.dir" value="networktables-input/src"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="lib.dir" value="lib"/>
    <property name="output.jar" value="networktables-input.jar"/>
    <property name="dist.dir" value="${build.dir}"/>
    <property name="networktables.desktop.jar" value="NetworkTables-3.1.7-desktop.jar" />
    <property name="networktables.raspbian.jar" value="NetworkTables-3.1.7-arm-raspbian.jar" />

    <!-- Most Linux distributions supply the /etc/os-release file, which looks
         like a standard Java properties file and has a consistent syntax.  It
         is part of the Linux Standards Base.

         The following line imports all of its properties into Ant as-is (except for
         the common "lsb." prefix.)  The best thing is that Ant doesn't care if the
         properties file does not exist (see
         https://ant.Apache.org/manual/Tasks/property.html), so this is safe
         to run on Windows, too, merely giving us an empty set of properties).

         To use one of these properties, simply create a <condition/> that uses
         the key and then test for the condition:

           <condition property="is_debian_or_ubuntu">
             <or>
               <matches string="${lsb.ID}" pattern="debian" casesensitive="false" />
               <matches string="${lsb.ID}" pattern="ubuntu" casesensitive="false" />
             </or>
           </condition>
           <echo message="Only print this on Debian or Ubuntu" if:set="${is_debian_or_ubuntu}"
    -->
    <property file="/etc/os-release" prefix="lsb" />

    <!-- The most important condition in this file: are we on Raspbian or not? -->
    <condition property="is_raspberry_pi">
        <and>
            <os family="unix"/>
            <os arch="arm"/>
            <matches string="${lsb.ID}" pattern="raspbian" casesensitive="false" />
        </and>
    </condition>

    <!-- Construct an intelligent classpath.

         See http://ant.Apache.org/manual/Types/selectors.html for more, the
         selector containers in particular.
    -->
    <path id="_classpath">
        <fileset dir="${lib.dir}" id="_classpath.fileset">
            <or>
                <!-- Include everything *except* the NetworkTables libraries; we
                     handle those separately. -->
                <filename name="NetworkTables*.jar" negate="true"/>
                <!-- Because NetworkTables is driven by a JNI interface to
                     native code, there are two different NetworkTables JAR
                     libraries, each corresponding to one of the two platforms
                     we target during development:

                     - lib/NetworkTables-x.y.z-arm-raspbian.jar: The ARM32
                       build, appropriate for Raspberry Pis running Raspbian
                       (these are our standard development platforms because
                       they are cheap);

                     - lib/NetworkTables-x.y.z-desktop.jar: A standard build
                       for both 32- and 64-bit desktop machines, such as the
                       MageiaLinux box I'm trying this from or the driver
                       stations that we use for deploying to the robot.

                     We only need one of the two in the classpath, so we use
                     Ant's OS detection logic to create condition objects for
                     us, then use the condition objects to include the right
                     JAR in the classpath. -->
                <selector if="is_raspberry_pi">
                    <filename name="${networktables.raspbian.jar}" />
                </selector>
                <selector unless="is_raspberry_pi">
                    <filename name="${networktables.desktop.jar}" />
                </selector>
            </or>
        </fileset>
    </path>

    <uptodate property="build.uptodate">
        <!-- We only need a new build when the Java files corresponding to the
             class files are updated. -->
        <globmapper from="*.java" to="${classes.dir}/*.class" />
        <srcfiles dir="${source.dir}" includes="**/*.java" />
    </uptodate>
    <uptodate property="jar.uptodate" targetfile="${output.jar}">
        <!-- We only need a new JAR if the class files or dependency libraries
             are updated. -->
        <srcfiles dir="${classes.dir}" includes="**/*.class" />
        <srcfiles dir="${lib.dir}" includes="**/*.jar" />
    </uptodate>
    <condition property="uptodate">
        <and>
            <istrue value="${build.uptodate}"/>
            <istrue value="${jar.uptodate}"/>
        </and>
    </condition>

    <target name="debug"
            description="Prints various parameters used to debug this build script.">
        <!-- Convert the _classpath into a local property so we can print it out. -->
        <pathconvert property="foo" refid="_classpath"/>
        <echo message="_classpath: ${foo}" />
        <echo message="LSB properties: ID=${lsb.ID}" />
        <echo message="OS: { Name: ${os.name}, arch: ${os.arch}, version: ${os.version} }" />
        <echo message="We are on a supported Raspberry Pi." if:set="is_raspberry_pi" />
        <echo message="The build is up-to-date." if:true="${build.uptodate}" />
        <echo message="A new build is required." unless:true="${build.uptodate}" />
        <echo message="${output.jar} is up-to-date." if:true="${jar.uptodate}" />
        <echo message="${output.jar} needs to be rebuilt." unless:true="${jar.uptodate}" />
    </target>

    <target name="clean"
            description="Removes all temporary build artifacts.">
        <delete verbose="true">
            <fileset dir="${classes.dir}" includes="**/*.class" />
            <fileset dir="." includes="networktable-input.jar" />
        </delete>
    </target>

    <target name="compile"
            description="Builds a stand-alone, client JAR file that can be
                         deployed on driver station (and hopefully, anywhere
                         else.)  The JAR program handles both vision
                         processing and keyboard input."
            unless="${build.uptodate}">
        <mkdir dir="${classes.dir}"/>
        <!-- If this fails on the JavaFX imports and you're on a Raspberry Pi,
             consider running "apt-get install openjfx". -->
        <javac srcdir="${source.dir}"
               destdir="${classes.dir}"
               debug="on"
               includeAntRuntime="false"
               verbose="true">
            <include name="**/*.java" />
            <classpath refid="_classpath" />
        </javac>
    </target>

    <target name="jar"
            depends="compile"
            description="Zips up all the build artifacts from the compile step
                         as a single coherent, executable JAR file."
            unless="${uptodate}">
        <pathconvert property="build.classpath" refid="_classpath"/>
        <jar destfile="${output.jar}"
             basedir="${classes.dir}"
             includes="**/*.class"
             excludes="">
            <manifest>
                <attribute name="Main-Class" value="main.NetworkTablesInput" />
                <attribute name="Class-Path" value="." />
            </manifest>
            <!-- Use the <archives/> resource
                 (http://ant.Apache.org/manual/Types/resources.html#archives)
                 to reference every single class file within every single JAR
                 files in the classpath.  All of them will be copies into the
                 JAR as-is. -->
            <archives>
                <zips>
                    <restrict>
                        <path path="${build.classpath}"/>
                        <name name="*.jar"/>
                    </restrict>
                </zips>
            </archives>
            <!--
                This seems to do the same thing as above, but more succintly.
                And no, it does not support internal prefixes either.

                <zipgroupfileset refid="_classpath.fileset" />
            -->
            <!--
                This would also work, but then you'd have to list the JARs one
                by one.  The advantage is that we get to pick an internal
                directory prefix.

                <zipfileset prefix="classes" src="lib/NetworkTables.jar"/>
            -->
        </jar>
    </target>
</project>
